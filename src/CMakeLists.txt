project(OpenCamLib)

if(WIN32)
  #Using WINDOWS_EXPORT_ALL_SYMBOLS added in 3.4
  cmake_minimum_required(VERSION 3.4)
else()
  cmake_minimum_required(VERSION 2.6)
endif()

#set( CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR} )

if(COMMAND cmake_policy)
  cmake_policy(SET CMP0003 NEW)
endif(COMMAND cmake_policy)

# some options to set what is built:
option(BUILD_CXX_LIB
  "Build/install the pure c++ libocl library? " ON)

option(BUILD_PY_LIB 
  "Build/install the python ocl library? " ON)

option(BUILD_DOC
  "Build/install the ocl documentation? " ON)

if (UNIX AND NOT APPLE)
  option(BUILD_DEB "Build Debian package" ON)
else()
  option(BUILD_DEB "Build Debian package" OFF)
endif(UNIX AND NOT APPLE)

set(PYTHON_SITE_PREFIX_DEFAULT "")
if(WIN32)
  set(PYTHON_SITE_PREFIX_DEFAULT bin)
endif(WIN32)
set(PYTHON_SITE_INSTALL_PREFIX ${PYTHON_SITE_PREFIX_DEFAULT}
  CACHE PATH "Relative to install prefix. Added to default site-packages path")
 
option(USE_OPENMP
    "Use OpenMP for parallel computation" ON)

if (NOT BUILD_CXX_LIB)
  message(STATUS " Note: will NOT build pure c++ library")
endif(NOT BUILD_CXX_LIB)

if (NOT BUILD_PY_LIB)
  message(STATUS " Note: will NOT build python library")
endif(NOT BUILD_PY_LIB)

if (NOT BUILD_DOC)
  message(STATUS " Note: will NOT build ocl documentation")
endif(NOT BUILD_DOC)

# figure out the gcc version
include(gcc_version.cmake)

#
# Figure out how to build and where to install the Python modules
#

set(Python_ADDITIONAL_VERSIONS "2.7")
find_package(PythonInterp REQUIRED)

if (APPLE)
  # Ask Python to tell us it's include directory, if nobody else has
  if(NOT DEFINED PYTHON_INCLUDE_DIRS)
    execute_process(COMMAND ${PYTHON_EXECUTABLE} -c
      "from distutils.sysconfig import get_python_inc;print get_python_inc()"
      OUTPUT_VARIABLE PYTHON_INCLUDE_DIRS
      RESULT_VARIABLE PYTHON_INCLUDE_DIR_RESULT ERROR_QUIET)
    if(NOT PYTHON_INCLUDE_DIR_RESULT MATCHES 0)
      message(SEND_ERROR "Failed to determine PYTHON_INCLUDE_DIR")
    endif(NOT PYTHON_INCLUDE_DIR_RESULT MATCHES 0)
  endif(NOT DEFINED PYTHON_INCLUDE_DIRS)

  # Similar for the Python library
  if(NOT DEFINED PYTHON_LIBRARY)
      # Get the library path
      execute_process(COMMAND "${PYTHON_EXECUTABLE}" -c
        "from distutils import sysconfig;print sysconfig.get_config_var('LIBDIR')"
        OUTPUT_VARIABLE PYTHON_LIBRARY_DIR
        RESULT_VARIABLE PYTHON_LIBRARY_DIR_RESULT ERROR_QUIET)
      string(STRIP ${PYTHON_LIBRARY_DIR} PYTHON_LIBRARY_DIR)
      if(NOT PYTHON_LIBRARY_DIR_RESULT MATCHES 0)
          message(SEND_ERROR "Failed to determine PYTHON_LIBRARY")
      endif(NOT PYTHON_LIBRARY_DIR_RESULT MATCHES 0)

      # Get library filename - might not be safe to assume .dylib extension?
      execute_process(COMMAND "${PYTHON_EXECUTABLE}" -c
        "import sys;print 'libpython%d.%d.dylib'%sys.version_info[0:2]"
        OUTPUT_VARIABLE PYTHON_LIBRARY_FILE
        RESULT_VARIABLE PYTHON_LIBRARY_FILE_RESULT ERROR_QUIET)
      string(STRIP ${PYTHON_LIBRARY_FILE} PYTHON_LIBRARY_FILE)
      if(NOT PYTHON_LIBRARY_FILE_RESULT MATCHES 0)
          message(SEND_ERROR "Failed to determine PYTHON_LIBRARY")
      endif(NOT PYTHON_LIBRARY_FILE_RESULT MATCHES 0)

      set(PYTHON_LIBRARY "${PYTHON_LIBRARY_DIR}/${PYTHON_LIBRARY_FILE}")
  endif(NOT DEFINED PYTHON_LIBRARY)
endif (APPLE)

# Ubuntu: ${PYTHON_SITE_INSTALL_PREFIX}/lib/python2.7/dist-packages
# macOS: ${PYTHON_SITE_INSTALL_PREFIX}/lib/python2.7/site-packages
# Windows: ${PYTHON_SITE_INSTALL_PREFIX}/Lib/site-packages
execute_process(
  COMMAND ${PYTHON_EXECUTABLE} -c "from distutils.sysconfig import get_python_lib; print get_python_lib(False,False,'${PYTHON_SITE_INSTALL_PREFIX}')"
  OUTPUT_VARIABLE Python_site_packages
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

execute_process(
  COMMAND ${PYTHON_EXECUTABLE} -c "from distutils.sysconfig import get_python_lib; print get_python_lib(plat_specific=True,standard_lib=False,prefix='${PYTHON_SITE_INSTALL_PREFIX}')"
  OUTPUT_VARIABLE Python_arch_packages
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
file(TO_CMAKE_PATH ${Python_site_packages} Python_site_packages)
file(TO_CMAKE_PATH ${Python_arch_packages} Python_arch_packages)

if(NOT DEFINED PYTHON_VERSION_STRING)
    find_package(PythonLibs 2 REQUIRED)
else()
    find_package(PythonLibs ${PYTHON_VERSION_STRING} EXACT)
endif(NOT DEFINED PYTHON_VERSION_STRING)

include_directories(${PYTHON_INCLUDE_DIRS} )

#
# Turn compiler warnings up to 11, at least with gcc.  I don't know how to
# do this with other compilers we might support and I'm leaving it up to
# the relevant platform maintainers...
# #include'ing the boost graph-library creates deprecated warnings
# thus we use now use -Wno-deprecated here.
#
if (UNIX)
  if(GCC_4_6)
    message(STATUS "setting gcc options: -Wall -Werror -Wno-deprecated -pedantic-errors")
    add_definitions(-Wall  -Wno-deprecated -Werror -pedantic-errors)
  else(GCC_4_6)
    message(STATUS "setting gcc options: -Wall  -Wno-deprecated -pedantic-errors")
    add_definitions(-Wall  -Wno-deprecated -pedantic-errors)
  endif(GCC_4_6)
endif (UNIX)

option(BUILD_TYPE
  "Build type: Release=ON/Debug=OFF  " ON)

if (BUILD_TYPE)
  message(STATUS " CMAKE_BUILD_TYPE = Release")
  set(CMAKE_BUILD_TYPE Release)
endif(BUILD_TYPE)

if (NOT BUILD_TYPE)
  message(STATUS " CMAKE_BUILD_TYPE = Debug")
  set(CMAKE_BUILD_TYPE Debug)
endif(NOT BUILD_TYPE)

include_directories(${CMAKE_CURRENT_BINARY_DIR})

# find BOOST and boost-python
find_package( Boost COMPONENTS python REQUIRED)
if(Boost_FOUND)
  include_directories(${Boost_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS})
  message(STATUS "found Boost: " ${Boost_LIB_VERSION})
  message(STATUS "boost-incude dirs are: " ${Boost_INCLUDE_DIRS})
  message(STATUS "boost-python lib is: " ${Boost_PYTHON_LIBRARY})
  message(STATUS "boost_LIBRARY_DIRS is: " ${Boost_LIBRARY_DIRS})
  message(STATUS "Boost_LIBRARIES is: " ${Boost_LIBRARIES})    
endif()

if(USE_OPENMP)
  if(APPLE)
    # OpenMP does not work with the default Apple llvm/clang++
    # Install a more recent version using Homebrew:
    # "brew install llvm"
    set(OpenMP_CXX_FLAGS "-fopenmp=libomp")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  else()
    find_package( OpenMP REQUIRED )
  endif()

  if (OPENMP_FOUND)
    message(STATUS "found OpenMP, compiling with flags: " ${OpenMP_CXX_FLAGS} )
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  endif(OPENMP_FOUND)

endif(USE_OPENMP)

IF(EXISTS ${OpenCamLib_SOURCE_DIR}/version_string.hpp)
  file(STRINGS "${OpenCamLib_SOURCE_DIR}/version_string.hpp" OpenCamLib_BUILD_SPECIFICATION REGEX "^[ \t]*#define[ \t]+VERSION_STRING[ \t]+.*$")
  if(OpenCamLib_BUILD_SPECIFICATION)
    string(REGEX REPLACE ".*#define[ \t]+VERSION_STRING[ \t]+\"(.*)\".*" "\\1" MY_VERSION ${OpenCamLib_BUILD_SPECIFICATION})
  else()
    message(FATAL_ERROR "Data were not found for the required build specification.")
  endif()
  SET(version_string ${OpenCamLib_SOURCE_DIR}/version_string.hpp)
ELSE(EXISTS ${OpenCamLib_SOURCE_DIR}/version_string.hpp)
  ################ create version_string.hpp, http://stackoverflow.com/questions/3780667
  # include the output directory, where the version_string.hpp file is generated
  include_directories(${CMAKE_CURRENT_BINARY_DIR})
  include(version_string.cmake)
  # now parse the git commit id:
  STRING(REGEX REPLACE "([0-9][0-9]).*" "\\1" GIT_MAJOR_VERSION "${GIT_COMMIT_ID}" )
  STRING(REGEX REPLACE "[0-9][0-9].([0-9][0-9])-.*" "\\1" GIT_MINOR_VERSION "${GIT_COMMIT_ID}" )
  STRING(REGEX REPLACE "[0-9][0-9].[0-9][0-9]-(.*)-.*" "\\1" GIT_PATCH_VERSION "${GIT_COMMIT_ID}" )
  SET(MY_VERSION "${GIT_MAJOR_VERSION}.${GIT_MINOR_VERSION}.${GIT_PATCH_VERSION}" CACHE STRING "name")
  SET(version_string ${CMAKE_CURRENT_BINARY_DIR}/version_string.hpp)
ENDIF(EXISTS ${OpenCamLib_SOURCE_DIR}/version_string.hpp)

message(STATUS "OpenCamLib version: ${MY_VERSION}")

# this defines the source-files
set(OCL_GEO_SRC
  ${OpenCamLib_SOURCE_DIR}/geo/arc.cpp
  ${OpenCamLib_SOURCE_DIR}/geo/bbox.cpp
  ${OpenCamLib_SOURCE_DIR}/geo/ccpoint.cpp
  ${OpenCamLib_SOURCE_DIR}/geo/clpoint.cpp
  ${OpenCamLib_SOURCE_DIR}/geo/line.cpp
  ${OpenCamLib_SOURCE_DIR}/geo/path.cpp
  ${OpenCamLib_SOURCE_DIR}/geo/point.cpp
  ${OpenCamLib_SOURCE_DIR}/geo/stlreader.cpp
  ${OpenCamLib_SOURCE_DIR}/geo/stlsurf.cpp
  ${OpenCamLib_SOURCE_DIR}/geo/triangle.cpp
  )

set(OCL_CUTTER_SRC
  ${OpenCamLib_SOURCE_DIR}/cutters/ballcutter.cpp
  ${OpenCamLib_SOURCE_DIR}/cutters/bullcutter.cpp
  ${OpenCamLib_SOURCE_DIR}/cutters/compositecutter.cpp
  ${OpenCamLib_SOURCE_DIR}/cutters/conecutter.cpp
  ${OpenCamLib_SOURCE_DIR}/cutters/millingcutter.cpp
  ${OpenCamLib_SOURCE_DIR}/cutters/cylcutter.cpp
  ${OpenCamLib_SOURCE_DIR}/cutters/ellipse.cpp
  ${OpenCamLib_SOURCE_DIR}/cutters/ellipseposition.cpp
  )

set(OCL_DROPCUTTER_SRC
  ${OpenCamLib_SOURCE_DIR}/dropcutter/batchdropcutter.cpp
  ${OpenCamLib_SOURCE_DIR}/dropcutter/pointdropcutter.cpp
  ${OpenCamLib_SOURCE_DIR}/dropcutter/pathdropcutter.cpp
  ${OpenCamLib_SOURCE_DIR}/dropcutter/adaptivepathdropcutter.cpp
  )

set(OCL_ALGO_SRC
  ${OpenCamLib_SOURCE_DIR}/algo/batchpushcutter.cpp
  ${OpenCamLib_SOURCE_DIR}/algo/fiberpushcutter.cpp
  ${OpenCamLib_SOURCE_DIR}/algo/interval.cpp
  ${OpenCamLib_SOURCE_DIR}/algo/fiber.cpp
  ${OpenCamLib_SOURCE_DIR}/algo/waterline.cpp
  ${OpenCamLib_SOURCE_DIR}/algo/adaptivewaterline.cpp
  ${OpenCamLib_SOURCE_DIR}/algo/weave.cpp
  ${OpenCamLib_SOURCE_DIR}/algo/simple_weave.cpp
  ${OpenCamLib_SOURCE_DIR}/algo/smart_weave.cpp
  )


set(OCL_COMMON_SRC
  ${OpenCamLib_SOURCE_DIR}/common/numeric.cpp
  ${OpenCamLib_SOURCE_DIR}/common/lineclfilter.cpp
  )

set( OCL_INCLUDE_FILES  
  ${OpenCamLib_SOURCE_DIR}/geo/arc.hpp
  ${OpenCamLib_SOURCE_DIR}/geo/bbox.hpp
  ${OpenCamLib_SOURCE_DIR}/geo/ccpoint.hpp
  ${OpenCamLib_SOURCE_DIR}/geo/clpoint.hpp
  ${OpenCamLib_SOURCE_DIR}/geo/line.hpp
  ${OpenCamLib_SOURCE_DIR}/geo/path.hpp
  ${OpenCamLib_SOURCE_DIR}/geo/stlreader.hpp
  ${OpenCamLib_SOURCE_DIR}/geo/stlsurf.hpp
  ${OpenCamLib_SOURCE_DIR}/geo/triangle.hpp
  ${OpenCamLib_SOURCE_DIR}/geo/point.hpp
  
  ${OpenCamLib_SOURCE_DIR}/cutters/ballcutter.hpp
  ${OpenCamLib_SOURCE_DIR}/cutters/bullcutter.hpp
  ${OpenCamLib_SOURCE_DIR}/cutters/compositecutter.hpp
  ${OpenCamLib_SOURCE_DIR}/cutters/conecutter.hpp
  ${OpenCamLib_SOURCE_DIR}/cutters/cylcutter.hpp
  ${OpenCamLib_SOURCE_DIR}/cutters/ellipseposition.hpp
  ${OpenCamLib_SOURCE_DIR}/cutters/millingcutter.hpp
  ${OpenCamLib_SOURCE_DIR}/cutters/ellipse.hpp
  
  ${OpenCamLib_SOURCE_DIR}/dropcutter/adaptivepathdropcutter.hpp
  ${OpenCamLib_SOURCE_DIR}/dropcutter/pathdropcutter.hpp
  ${OpenCamLib_SOURCE_DIR}/dropcutter/batchdropcutter.hpp
  ${OpenCamLib_SOURCE_DIR}/dropcutter/pointdropcutter.hpp
  
  ${OpenCamLib_SOURCE_DIR}/common/brent_zero.hpp
  ${OpenCamLib_SOURCE_DIR}/common/kdnode.hpp
  ${OpenCamLib_SOURCE_DIR}/common/kdtree.hpp
  ${OpenCamLib_SOURCE_DIR}/common/numeric.hpp
  ${OpenCamLib_SOURCE_DIR}/common/lineclfilter.hpp
  ${OpenCamLib_SOURCE_DIR}/common/clfilter.hpp
  ${OpenCamLib_SOURCE_DIR}/common/halfedgediagram.hpp

  
  ${OpenCamLib_SOURCE_DIR}/algo/operation.hpp
  ${OpenCamLib_SOURCE_DIR}/algo/batchpushcutter.hpp
  ${OpenCamLib_SOURCE_DIR}/algo/fiberpushcutter.hpp
  ${OpenCamLib_SOURCE_DIR}/algo/fiber.hpp
  ${OpenCamLib_SOURCE_DIR}/algo/interval.hpp
  ${OpenCamLib_SOURCE_DIR}/algo/waterline.hpp
  ${OpenCamLib_SOURCE_DIR}/algo/adaptivewaterline.hpp
  ${OpenCamLib_SOURCE_DIR}/algo/weave.hpp
  ${OpenCamLib_SOURCE_DIR}/algo/simple_weave.hpp
  ${OpenCamLib_SOURCE_DIR}/algo/smart_weave.hpp
  ${OpenCamLib_SOURCE_DIR}/algo/weave_typedef.hpp
  ${OpenCamLib_SOURCE_DIR}/algo/tsp.hpp
  
  ${version_string}

  )


# this branches into the dirs and compiles stuff there
ADD_SUBDIRECTORY( ${OpenCamLib_SOURCE_DIR}/cutters  )
ADD_SUBDIRECTORY( ${OpenCamLib_SOURCE_DIR}/geo  )
ADD_SUBDIRECTORY( ${OpenCamLib_SOURCE_DIR}/algo  ) 
ADD_SUBDIRECTORY( ${OpenCamLib_SOURCE_DIR}/dropcutter  ) 
ADD_SUBDIRECTORY( ${OpenCamLib_SOURCE_DIR}/common  ) 

# include dirs
include_directories( ${OpenCamLib_SOURCE_DIR}/cutters )
include_directories( ${OpenCamLib_SOURCE_DIR}/geo )
include_directories( ${OpenCamLib_SOURCE_DIR}/algo )
include_directories( ${OpenCamLib_SOURCE_DIR}/dropcutter )
include_directories( ${OpenCamLib_SOURCE_DIR}/common )
include_directories( ${OpenCamLib_SOURCE_DIR} )

message(STATUS "CMAKE_INSTALL_PREFIX is : " ${CMAKE_INSTALL_PREFIX})
message(STATUS "Python modules will be installed to: " ${Python_site_packages})
message(STATUS "Python libraries will be installed to: " ${Python_arch_packages})

if (BUILD_PY_LIB)
  # this makes the ocl Python module
  add_library(
    ocl 
    MODULE
    ocl_cutters.cpp
    ocl_geometry.cpp
    ocl_algo.cpp
    ocl_dropcutter.cpp
    ocl.cpp
    
    )

  message(STATUS "linking python binary ocl.so with boost: " ${Boost_PYTHON_LIBRARY})
  target_link_libraries(ocl ocl_common ocl_dropcutter ocl_cutters  ocl_geo ocl_algo ${Boost_LIBRARIES}  ${PYTHON_LIBRARIES} -lboost_python -lboost_system)
  # 
  # this makes the lib name ocl.so and not libocl.so
  set_target_properties(ocl PROPERTIES PREFIX "") 
  if (NOT APPLE)
    set_target_properties(ocl PROPERTIES VERSION ${MY_VERSION}) 
  endif (NOT APPLE)
  
  if(WIN32)
    set_target_properties(ocl PROPERTIES SUFFIX ".pyd")
    set_target_properties(ocl PROPERTIES DEBUG_OUTPUT_NAME ocl_d)
    set_target_properties(ocl PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
  endif(WIN32)

  install(
    TARGETS ocl
    LIBRARY DESTINATION ${Python_arch_packages}
    )
  # these are the python helper lib-files such as camvtk.py 
  install(
    DIRECTORY lib/
    DESTINATION ${Python_site_packages}
    #    PATTERN .svn EXCLUDE
    )
endif (BUILD_PY_LIB)


# this is the C++ shared library
if (BUILD_CXX_LIB)
  add_library(
    libocl
    SHARED
    ${OCL_GEO_SRC}
    ${OCL_CUTTER_SRC}
    ${OCL_ALGO_SRC}
    ${OCL_DROPCUTTER_SRC}
    ${OCL_COMMON_SRC}
    )
  set_target_properties(libocl PROPERTIES PREFIX "") 
  set_target_properties(libocl PROPERTIES VERSION ${MY_VERSION})
  
  if(WIN32)
    set_target_properties(libocl PROPERTIES DEBUG_OUTPUT_NAME libocl_d)
    set_target_properties(libocl PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
    
    install(
      TARGETS libocl
      RUNTIME DESTINATION bin
      ARCHIVE DESTINATION lib
    )
  else()
    install(
      TARGETS libocl
      LIBRARY DESTINATION lib/opencamlib
      ARCHIVE DESTINATION lib/opencamlib
      PERMISSIONS OWNER_READ OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
    )
  endif(WIN32)

  # this installs the c++ include headers
  install(
    FILES ${OCL_INCLUDE_FILES}
    DESTINATION include/opencamlib
    PERMISSIONS OWNER_READ GROUP_READ WORLD_READ
    )
endif (BUILD_CXX_LIB)


#
# this installs the examples
#

# install(
#     DIRECTORY ../scripts/
#    DESTINATION share/doc/python-opencam/examples
#    PATTERN .svn EXCLUDE
# )

# the example STL files
# install(
#     DIRECTORY ../stl/
#     DESTINATION share/doc/python-opencam/examples/stl
#     PATTERN .svn EXCLUDE
# )


#
# build & install documentation (if Doxygen is available)
#

if (BUILD_DOC)

  find_package(Doxygen)
  IF (DOXYGEN_FOUND)
    message(STATUS "Found doxygen. Documentation can be built with 'make doc' ")
    
    # this works around a bug in cmake 2.4 (Ubuntu Hardy)
    execute_process(
      COMMAND mkdir -p doc/html doc/latex
      )

    find_package(LATEX)
    IF    (NOT LATEX_COMPILER)
      message(STATUS "latex command LATEX_COMPILER not found but usually required. You will probably get warnings and user inetraction on doxy run.")
    ENDIF (NOT LATEX_COMPILER)
    IF    (NOT MAKEINDEX_COMPILER)
      message(STATUS "makeindex command MAKEINDEX_COMPILER not found but usually required.")
    ENDIF (NOT MAKEINDEX_COMPILER)
    IF    (NOT DVIPS_CONVERTER)
      message(STATUS "dvips command DVIPS_CONVERTER not found but usually required.")
    ENDIF (NOT DVIPS_CONVERTER)
    
    #if (EXISTS Doxyfile)
    set(DOXY_CONFIG ${OpenCamLib_SOURCE_DIR}/Doxyfile)
    #endif (EXISTS Doxyfile)

    add_custom_command(
      OUTPUT
      doc/latex/index.tex
      doc/html/index.html
      COMMAND ${DOXYGEN_EXECUTABLE} ${DOXY_CONFIG}
      COMMENT building LaTex & HTML docs
      )

    add_custom_target(
      doc
      DEPENDS doc/latex/index.tex
      )


    IF (EXISTS ${PDFLATEX_COMPILER})
      add_custom_command(
        OUTPUT doc/latex/refman.pdf
        DEPENDS doc/latex/index.tex
        WORKING_DIRECTORY doc/latex
        COMMAND make pdf
        COMMENT building PDF docs
        COMMAND mv refman.pdf ../ocl-manual.pdf
        )

      add_custom_target(
        doc-pdf
        DEPENDS doc/latex/refman.pdf
        )

      add_dependencies(doc doc-pdf)
    ELSE (EXISTS ${PDFLATEX_COMPILER}) 
      message(STATUS "pdflatex compiler not found, PDF docs will not be built")
    ENDIF (EXISTS ${PDFLATEX_COMPILER})


    add_custom_target(
      doc-latex
      DEPENDS doc/latex/index.tex
      )

    #install(
    #    DIRECTORY doc/latex/
    #    DESTINATION share/doc/python-opencam/pdf
    #    FILES_MATCHING PATTERN *.pdf
    #)

    #install(
    #    FILES doc/ocl-manual.pdf
    #    DESTINATION share/doc/python-opencam/pdf
    #)

    #install(
    #    DIRECTORY doc/html
    #    DESTINATION share/doc/python-opencam/
    #)

  endif(DOXYGEN_FOUND)
endif (BUILD_DOC)

if (BUILD_DEB)
  include(${CMAKE_SOURCE_DIR}/deb/package_details.cmake)

  # "make spackage"
  add_custom_target(spackage 
    ${CMAKE_COMMAND} 
    -D SRC_DIR:STRING=${CMAKE_SOURCE_DIR} 
    -D MY_VERSION:STRING=${MY_VERSION} 
    -C ${CMAKE_SOURCE_DIR}/deb/package_details.cmake
    -P ${CMAKE_CURRENT_SOURCE_DIR}/deb/DebSourcePPA.cmake 
  )
endif(BUILD_DEB)

message(STATUS "type:")
message(STATUS " 'make' for a normal build")
message(STATUS " 'make -j8' to build faster (if you have many cpus)")
message(STATUS " 'make install' to install")
#message(STATUS " 'make spackage-oneiric' to build a debian source-package only for oneiric")
message(STATUS " 'make test' to run the tests")

if (BUILD_DEB)
    message(STATUS " 'make package' to build a binary deb-packate")
    message(STATUS " 'make spackage' to build debian source-packages")
    
    # "make package"
    include(CPack) # this should be last
endif(BUILD_DEB)
